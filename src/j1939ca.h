/****************************************************************
 *          J1939 Controller Application (j1939ca)
 ****************************************************************/
/*
 * Program
 *				J1939 Controller Application (j1939ca)
 * Purpose
 *				This object provides the Controller Application
 *              Support for the J1939 object. It handles all its
 *              messages as well as other housekeeping functions.
 *
 *              It maintains a NAME and Claimed address.
 *
 *              Each Controller Application must go through an
 *              address claim procedure before they have an address
 *              that they can use for talking to other CAs.
 *
 *              Since all messages for the CA are funneled through
 *              this object, we handle the Data Link Support here
 *              as well including PGN Requests and Transport
 *              Protocol messages.
 *
 *              A CA has 3 main objectives:
 *              1. Handle inbound requests
 *              2. Transmit timed messages related to CA Functionality
 *              3. Handle responses or timeouts generated by requests
 *
 * Remarks
 *	**			Certain external functions must be set up before this object
 *              is put into a running state:
 *                  MsClock - to get the current clock in milli-seconds
 *                            (tn_sys_time_get if TNEO) or sleep N milli-seconds
 * References
 *		"Data Structures and Algorithms", Alfred V. Aho et al,
 *			Addison-Wesley, 1985
 *		"Data Structures using C", Aaron M. Tenenbaum et al,
 *			Prentice-Hall, 1990
 *		"Programs and Data Structures in C", Leendert Ammeraal,
 *			John Wiley & Sons, 1987
 */



/*
 This is free and unencumbered software released into the public domain.
 
 Anyone is free to copy, modify, publish, use, compile, sell, or
 distribute this software, either in source code form or as a compiled
 binary, for any purpose, commercial or non-commercial, and by any
 means.
 
 In jurisdictions that recognize copyright laws, the author or authors
 of this software dedicate any and all copyright interest in the
 software to the public domain. We make this dedication for the benefit
 of the public at large and to the detriment of our heirs and
 successors. We intend this dedication to be an overt act of
 relinquishment in perpetuity of all present and future rights to this
 software under copyright law.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
 
 For more information, please refer to <http://unlicense.org/>
 */



#include        <j1939_defs.h>
#include        <j1939tbl.h>


#ifndef J1939CA_H
#define J1939CA_H	1


//****************************************************************
//* * * * * * * * * * * *  Data Definitions  * * * * * * * * * * *
//****************************************************************

#ifdef	__cplusplus
extern	"C" {
#endif

    typedef struct j1939ca_vtbl_s	{
        OBJ_IUNKNOWN    iVtbl;              // Inherited Vtbl.
        // Put other methods below this as pointers and add their
        // method names to the vtbl definition in j1939ca_object.c.
        // Properties:
        // Methods:
    } J1939CA_VTBL;
    
    
    
    // J1939CA Message Setup Routine definition
    typedef bool (*P_CA_MSGSETUP_RTN) (
    OBJ_PTR     ,                       // Object Ptr
    uint32_t    *,                      // PDU (j1939) Ptr
    uint16_t    ,                       // data area size
    void        *                       // Message Data Area
    );

    
    // PGN Table Entry
#pragma pack(push, 1)
    typedef struct j1939ca_pgn_entry_s {
        const
        J1939_PGN_ENTRY *pDef;          // Definition
        const
        P_SRVCMSG_RTN   pService;       // First parameter is assumed to be the responder
                                        // object ptr who handles the message.
        const
        P_MSGDATA_RTN   pDataSetup;
        const
        uint32_t        xmtTimeoutOff;  // Offset of Timeout repeat xmt
        const
        uint8_t         da;             // Destination Address if applicable
        uint8_t         rsvd[3];
    } J1939CA_PGN_ENTRY;
#pragma pack(pop)
    
    
#pragma pack(push, 1)
    typedef struct j1939ca_pgn_table_s {
        const
        uint16_t            cPGNs;
        const
        uint16_t            reserved16;
        const
        J1939CA_PGN_ENTRY   *(* const pPGNs)[];
                                        // PGN Index Ptr - It is assumed that they are
                                        //                  sorted by ascending PGN with
                                        //                  NULL terminator.
    } J1939CA_PGN_TABLE;
#pragma pack(pop)
    
    

    
    /****************************************************************
    * * * * * * * * * * *  Routine Definitions	* * * * * * * * * * *
    ****************************************************************/

    //---------------------------------------------------------------
    //                      *** Class Methods ***
    //---------------------------------------------------------------
    
    J1939CA_DATA * j1939ca_Alloc(
    );
    
        
    J1939CA_DATA *	j1939ca_New(
        OBJ_ID          *pCAN,
        OBJ_ID          *pSYS,
        uint32_t        spn2837,        // J1939 Identity Number (21 bits)
        uint16_t        spn2838,        // J1939 Manufacturer Code (11 bits)
        uint8_t         spn2846         // J1939 Industry Group (3 bits)
    );
    
    
    
    
    //---------------------------------------------------------------
    //                      *** Properties ***
    //---------------------------------------------------------------

    OBJ_ID          j1939ca_getCAN(
        J1939CA_DATA	*this
    );
    
    bool            j1939ca_setCAN(
        J1939CA_DATA	*this,
        OBJ_ID          pValue
    );
    
    
    uint8_t         j1939ca_getClaimedAddress(
        J1939CA_DATA	*this
    );
    
    
    P_SRVCMSG_RTN   j1939ca_getHandler(
        J1939CA_DATA	*this
    );

    
    J1939_NAME *    j1939ca_getName(
        J1939CA_DATA	*this
    );
    
    
    OBJ_ID          j1939ca_getSYS(
        J1939CA_DATA	*this
    );
    
    bool            j1939ca_setSYS(
        J1939CA_DATA	*this,
        OBJ_ID          pValue
    );
    
    
    bool            j1939ca_getTimedTransmits(
        J1939CA_DATA	*this
    );
    
    bool            j1939ca_setTimedTransmits(
        J1939CA_DATA	*this,
        bool            value
    );
    
    
    bool			j1939ca_setXmtMsg(
        J1939CA_DATA	*this,
        P_XMTMSG_RTN    pXmtMsg,
        void            *pData
    );

    
    bool			j1939ca_setXmtMsgDL(
        J1939CA_DATA	*this,
        P_J1939_XMTRTN  pXmtMsg,
        void            *pData
    );
    
    

    
    //---------------------------------------------------------------
    //                      *** Methods ***
    //---------------------------------------------------------------

    /* HandleMessages() serves two purposes. The first is to try to
     * handle any received messages. The second is to perform func-
     * tions such as transmitting messages on a timed basis. This
     * function assumes that it will be called consistantly enough
     * (ie 10ms - 20ms) so that it can perform its functions.
     * It returns true if it handled the message given otherwise false.
     */
    bool            j1939ca_HandleMessages(
        J1939CA_DATA	*this,
        uint32_t        eid,
        J1939_MSG       *pMsg           // NULL == Time-out
    );
    
    
    // j1939ca_Open calculates the needed buffer size, allocates an
    // area and sets up the control portion of the j1939ca.
    J1939CA_DATA *	j1939ca_Init(
        J1939CA_DATA	*this,
        OBJ_ID          *pCAN,
        OBJ_ID          *pSYS,
        uint32_t        spn2837,        // J1939 NAME Identity Number (21 bits)
        uint16_t        spn2838,        // J1939 NAME Manufacturer Code (11 bits)
        uint8_t         spn2846         // J1939 NAME Industry Group (3 bits)
    );
        
    
    uint32_t        j1939ca_MsTimeGet(
        J1939CA_DATA	*this
    );
    
    
    bool            j1939ca_TransmitPgn(
        J1939CA_DATA	*this,
        const
        J1939CA_PGN_ENTRY
                        *pPgnEntry
    );
    

    bool            j1939ca_TransmitPgnDa(
        J1939CA_DATA	*this,
        const
        J1939CA_PGN_ENTRY
                        *pPgnEntry,
        uint8_t         da
        );
    
    
    // Request a PGN to be transmitted.
    bool            j1939ca_TransmitPgn59904(
        J1939CA_DATA	*this,
        J1939_PGN       pgn,                // PGN being requested
        uint8_t         da                  // Destination Address
    );
    
    
    bool            j1939ca_XmtMsgDL(
        J1939CA_DATA	*this,
        uint32_t        msDelay,
        J1939_PDU       pdu,
        uint16_t        cData,
        void            *pData
    );
    
    
    
#ifdef	__cplusplus
};
#endif




#endif
